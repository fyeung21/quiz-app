{"version":3,"sources":["images/calmseas.jpg","App.styles.ts","API.ts","utils.ts","components/QuestionCard.tsx","App.tsx","index.tsx"],"names":["module","exports","Difficulty","GlobalStyle","createGlobalStyle","BGImage","Title","styled","h1","Wrapper","div","ButtonWrapper","correct","userClicked","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55d24f0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/calmseas.401e10fb.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\n\nimport BGImage from \"./images/calmseas.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: \"Roboto\", sans-serif;\n    }\n`\nexport const Title = styled.h1`\n    font-family: \"Raleway\", serif;\n    font-size: 3rem;\n    color: #FFF;\n`\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: \"Raleway\", Arial;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        margin: 20px;\n    }\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n    }\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n        correct ?\n            \"#56FFA4\"\n            : !correct && userClicked\n                ? \"#FF5656\"\n                : \"#56CCFF\"\n    };\n        border: none;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        color: #000;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n`","import { shuffleArray } from \"./utils\";\n\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n        }\n    ))\n}","export const shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5);\n","import React from 'react';\nimport { Wrapper, ButtonWrapper } from \"../App.styles\";\nimport { AnswerObject } from \"../App\";\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNum: number;\n    totalQuestions: number;\n}\n\nexport const QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNum,\n    totalQuestions\n}) => {\n\n    return (\n        <Wrapper>\n            <p className=\"number\">\n                Question: {questionNum} / {totalQuestions}\n            </p>\n            <p dangerouslySetInnerHTML={{ __html: question }} />\n            <div>\n                {answers.map(answer => (\n                    <ButtonWrapper\n                        key={answer}\n                        correct={userAnswer?.correctAnswer === answer}\n                        userClicked={userAnswer?.answer === answer}\n                    >\n                        <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\n                        </button>\n                    </ButtonWrapper>\n                ))}\n            </div>\n        </Wrapper>\n    );\n}","import React, { useState } from 'react';\nimport { GlobalStyle, Title } from \"./App.styles\";\nimport { fetchQuizQuestions, Difficulty, QuestionState } from \"./API\";\nimport { QuestionCard } from './components/QuestionCard';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n\n      // Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    // Move onto the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <div className=\"App\">\n        <Title>Quiz Me!</Title>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ?\n          <button className=\"start\" onClick={startQuiz}>\n            Start\n        </button>\n          :\n          null\n        }\n\n        {!gameOver ?\n          <p className=\"score\">Score: {score}</p>\n          :\n          null\n        }\n\n        {loading && <p>Loading Questions...</p>}\n\n        {!loading && !gameOver &&\n          <QuestionCard\n            questionNum={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        }\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ?\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n        </button>\n          :\n          null\n        }\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}